/* *  ex8a1.c: *  Semaphores. *  =========================================================================== *  Written by Rani Abu Raia, id: 316396787, login: abura *   *  Desciption: *  This program defines an shared memory array of int numbers of a thousand *  cells. the program wait tell other programs fill all cells of the *  array. When the array is full the prog prints the needed output. * *  -Input: NONE. *  -Output: distinct , min and ma numbers in the array. * *  Compile: gcc -Wall ex8a1.c -o ex8a1 *  Run: ./ex8a1 */
*******************************************************************************
 /* *  ex8a2.c: *  Semaphores. *  =========================================================================== *  Written by Rani Abu Raia, id: 316396787, login: abura *   *	Desciption: *  This program creates 3 different copies to be run. *  Each program picks random numbers and store it the shared memory array. *  The numbers store is managed in turns and is controled by the semaphore: *  When the mutex is opened one program can enter the critical code, and *  locks the key for itself, at the same time other programs is waiting, *  when the program that holds the key is finish it open the key again the *  next program enters, doing this tell the array is full. when the array *  is full all programs prints the output needed. and searches for it in *  the array and deletes it. * *  -Input: the program id. *  -Output: how many values was new in the shared memory, *       	 and how many of all the numbers send was appeared the most in  *       	 the shared memory array. * *  Compile: gcc -Wall ex8a2.c -o ex8a2 *  Run: ./ex8a2 <PROGRAM_ID> */
*******************************************************************************
 * ex8b.c - * Semaphores * ============================================================================ * Written by: Rani Abu Raia, id = 316396787, login = abura * * DESCRIPTION: this program works as a array program, the program has * 				about 50000 random numbers, the program gets prime numbers * 				from clients "threads" to add to the array. * 				the the threads run in infinte loop and each time only one is * 				found in the cretical section that add numbers to array this  * 				happens using mutex - when a thread enter hey lock the mutex and * 				other threads wait, when finish he release the mutex and one of  * 				the waiting threads enters. * 				when array is full each thread top running and print what is the   * 				most common number found in the array from all numbers was sent * 				and how many new numbers where send. * 				and after all threads finish the main prog * 				prints how many distinct numbers in the array what is the max * 				and the min and exit. * *  -Input: NONE. *  -Output: each thread prints:  * 				-most common number found in the array from all numbers was sent * 				 and how many new numbers where send.  * 			 main program prints: * 				distinct , min and max numbers in the array. * *  Compile: gcc -Wall ex8b.c -o ex8b -lpthread *  Run: ./ex8b
